/*****************************************************************************
*           :
*           :     Copyright (c) 1993-94 by Alexey V. Papin.
*           :   This information may not be changed or copyed
*           :       without special permission of author.
*           :
* Name      : AS_MEM
* Describe  : Описания структур данных памяти прибора
* File      : C:\ALEX\WORK\AS_MEM.H
* Last edit : 07.11.93 00.07.18
* Remarks   : Одна и та же область памяти может принадлежать 2 записям
*           : Изменены типы word-uint
*           : Число отсчетов сигнала - dimfft
*****************************************************************************/
/*                                                                            */
/*   В памяти прибора:                                                        */
/*  заголовок (1024 байта),                                                   */
/*  1 запись,2 запись,........,i запись,........,N запись.(переменной длины)  */
/*                                                                            */
/*  +*********+*******----------+*******-----+*******--+*******------------+  */
/*  | 1 Кбайт | 1 запись ...... | 2 запись . | 3 зап . | 4 запись ........ |  */
/*  +*********+*******----------+*******-----+*******--+*******------------+  */
/*  :         :                 :            :         :                   :  */
/*  +*********+                 :            :         :                   :  */
/*  | 1 Кбайт |                 :            :         :                   :  */
/*  +*********+                 :            :         :                   :  */
/*            +*******------------+          :         :                   :  */
/*            | 1 запись ........#|          :         :                   :  */
/*            +*******------------+          :         :                   :  */
/*                              +*******------------+  :                   :  */
/*  * - заголовок               | 2 запись ...######|  :                   :  */
/*  # - не используется,        +*******------------+  :                   :  */
/*      т.к. принадлежит                     +*******------------+         :  */
/*      другой записи                        | 3 запись #########|         :  */
/*      (не обращатся в эту область          +*******------------+         :  */
/*       из данной записи)                             +*******------------+  */
/*                                                     | 4 запись ........ |  */
/*                                                     +*******------------+  */
/*  В памяти компьютера:                                                      */
/* заголовок (1024 байта),                                                    */
/* 1 запись,2 запись,........,i запись,........,N запись.(M_N байта)          */
/*                                                                            */
/*                                                                            */
/*  +*******------------+                                                     */
/*  | i запись ........ |                                                     */
/*  +*******------------+                                                     */
/*          ^           ^                                                     */
/*          |___________|                                                     */
/*              M_N - максимальное число отсчетов спектра/сигнала             */
/*                                                                            */

#ifndef TYPES                  /*  Определение типов                          */
 #define TYPES                 /*                                             */
 typedef unsigned char byte;   /*                                             */
 typedef signed   int  word;   /*                                             */
 typedef unsigned int  uint;
#endif                         /*                                             */
                               /*                                             */
                               /*                                             */
#ifndef M_N                    /*  Максимальное число отсчетов сигнала/спек-  */
 #define M_N (2048)            /*  тра.                                       */
#endif                         /*                                             */
                               /*                                             */
                               /*                                             */
#ifndef MEM-TP                 /*  Определение типов структуры памяти         */
 #define MEM_TP                /*                                             */

 typedef struct      /*  Структура первого Кбайта памяти                      */
 {                   /*  (адреса абсолютные)                                  */
  uint res1 [2];     /*                                                       */
  uint numrec;       /*  S4  -  (количество записей+1);                       */
  uint res2;         /*                                                       */
  uint volume;       /*  S8  -  (объем принятой информации)/2                 */
  uint res3 [27];    /*                                                       */
  uint addr [480];   /*  Адреса записей в приборе (файле)                     */
                     /*  S64 -  (адрес первой записи/2);                      */
                     /*   первая запись начинается с адреса 1024,             */
                     /*   следовательно в S64 записано число 512;             */
                     /*  S66 -  (адрес второй  записи/2);                     */
                     /*  S68 -  (адрес третьей записи/2); и т.д.  ...         */
 } asHeader;         /*                                                       */


 typedef struct /*     Структура заголовка записи                                          */
 {              /*                                                                         */
  byte name[8]; /*     B0..B7 -  имя;                                                      */
  word res1;    /*     B8, B9 - нулевые байты                                              */
  byte mode[2]; /*     B10..B11 - режим  =                                                 */
                /*      'al'- прямой сигнал, линейный вход;                                */
                /*      'az'- прямой сигнал, вход усилителя заряда;                        */
                /*      'ol'- огибающая сигнала, линейный вход;                            */
                /*      'oz'- огибающая сигнала, вход усилителя заряда;                    */
                /*      'dn'- сигнал + импульсы от датчика(в разряде D0);                  */
                /*      'ts'- тестовый сигнал;                                             */
  word gain;    /*     S12 - код коэффициента усиления переключаемого усилителя =          */
                /*               восмеричные                                               */
                /*                 40    - усиление   -6 дБ                                */
                /*                 20    - усиление    0 дБ                                */
                /*                 10    - усиление    6 дБ                                */
                /*                120    - усиление   12 дБ                                */
                /*                110    - усиление   18 дБ                                */
                /*                104    - усиление   24 дБ                                */
                /*                102    - усиление   30 дБ                                */
                /*                101    - усиление   36 дБ                                */
  word hfreq;   /*     S14 - верхняя частота рабочего диапазона ( Гц);                     */
  word afreq;   /*     S16 - код средней частоты при работе с огибающей = десятичные       */
                /*                 0  при средней частоте 3.1 кГц                          */
                /*               192  при средней частоте 6.3 кГц                          */
                /*               128  при средней частоте   8 кГц                          */
                /*                64  при средней частоте  10 кГц;                         */
  word dimfft;  /*     S18 - размерность БПФ; (реальное число отсчетов сигнала)            */
  word aver;    /*     S20 - количество усреднений в данной записи;                        */
  byte yunit;   /*     B22 - байт контроля скорость/ускорение                              */
                /*      при вводе через усилитель заряда и идикации спектра                */
                /*       D7=0 информация в единицах ускорения (м/с2)                       */
                /*       D7=1 информация в единицах скорости  (м/с);                       */
                /*      при вводе по линейному входу информация в mV;                      */
  byte wind;    /*     B23 - байт контроля Хеннинг/прямоугольник                           */
                /*      D7=0 временное окно прямоугольник                                  */
                /*      D7=1 временное окно Хеннинга;                                      */
  word kofln;   /*     S24 - KOFLN (коэффициент);                                          */
  word res2;    /*     S26 - служебное слово (используется только программой прибора)      */
  word kdbch;   /*     S28 - KDBCH (коэффициент);                                          */
  byte type;    /*     B30 - байт контроля типа записи                                     */
                /*      D7=0 записан сигнал                                                */
                /*      D7=1 записан спектр;                                               */
  byte scale;   /*     B31 - байт контроля логарифм/линейный                               */
                /*      D7=0 масштаб по оси У линейный                                     */
                /*      D7=1 масштаб по оси У логарифмический;                             */
  word res3;    /*     S32 -  служ. слово (используется только программой прибора);        */
  word kdbln;   /*     S34 - KDBLN (коэффициент);                                          */
  word number;  /*     S36 - количество отсчетов информации в записи(сигнала или спектра); */
                /*           при показе в приборе (не более 800)                           */
  word mnoj;    /*     S38 - MNOJ  (коэффициент);                                          */
  word mnoj1;   /*     S40 - MNOJ1 (коэффициент);                                          */
  word res4;    /*     S42 - служ. слово (используется только программой прибора);         */
  word kofch;   /*     S44 - KOFCH (коэффициент);                                          */
  word res5;    /*     S46 - служ. слово (используется только программой прибора);         */
  byte y[1024]; /*     B48.....   отсчеты сигнала или спектра;                             */
                /*   Обозначим Х - значение байта(целое без знака 0..255),                 */
                /*             Y - фактическое значение отсчета, вычисляется               */
                /*             по следующей формуле                                        */
                /*                                                                         */
                /*             Y = A * ( X + B )                                           */
                /*                                                                         */
                /*   Коэффициенты А и В вычисляются по следующему алгоритму:               */
                /*  Z = MNOJ1        если записан сигнал;                                  */
                /*  Z = MNOJ1+MNOJ   если записан спектр;                                  */
                /*  Т = KDBCH        если вход усилителя заряда;                           */
                /*  T = KDBLN        если линейный вход;                                   */
                /*  B = -128         если записан сигнал;                                  */
                /*  B = 0            если записан спектр и масштаб линейный;               */
                /*  В = 4*Z+T+14     если записан спектр и масштаб логарифм.;              */
                /*  А = 0.25         если масштаб логарифмический;                         */
                /*                   если масштаб линейный                                 */
                /*  А = (7500/KOFCH)*EXP10(Z/20) - при входе усилителя заряда;             */
                /*  А = (7500/KOFLN)*EXP10(Z/20) - при линейном входе;                     */
                /*           EXP10  - експонента по основанию 10.                          */
 } asRecord;    /*                                                                         */

 typedef asRecord huge * asRecPtr;    /* Указатель на структуру asRecord     */
 typedef asHeader huge * asHeadPtr;   /* Указатель на структуру asHeader     */

#endif

#define MAX_MEM  (131072L)        /* объем памяти прибора */

#ifndef REPEATS                   /*                                         */
 #define REPEATS 3                /*    число повторений при ошибке приема   */
#endif                            /*                                         */
                                  /*                                         */
#ifndef ERRORS                    /*    ошибки обмена                        */
#define ERRORS                    /*                                         */
 #define E_OK    (0)              /*    успех                                */
 #define E_READ  (-1)             /*    ошибка чтения                        */
 #define E_WRITE (-2)             /*    ошибка записи                        */
 #define E_SUMM  (-3)             /*    ошибка контрольной суммы             */
 #define E_NOMEM (-4)             /*    ошибка нет памяти                    */
#endif                            /*                                         */

#ifndef SETTINGS
 #define SETTINGS   ((char)(0xE0|0x00|0x00|0x03))     /* установки обмена            */
                  /*  ^     ^    ^    ^                                      */
                  /*  |     |    |    \- восемь бит данных                   */
                  /*  |     |    \------ один стоп-бит                       */
                  /*  |     \----------- контроль по нечетности              */
                  /*  \----------------- скорость обмена 9600 бод            */
#endif

byte huge* getdump (long *size,void (*func)(double));
/***********
* Describe : принять дамп памяти прибора в память ЭВМ
* Params   : word *size -  размер принятых данных (в байтах), меньше чем
*          :               размер выделенной памяти, так как он выровнен
*          :               на границу 1024 байта
*          : PFV func    - функция для отображения считывания, ей
*          :               передаем процент считанной информации
* Return   : byte huge*  - указатель на буфер, куда записаны данные
* Call     : input,waitstart,setaddr,getKbyte,bioscom
***********/

int input(byte huge *x);
/***********
* Describe : принять байт из порта COM1
* Params   : byte *x - принятый байт
* Return   : int     - код ошибки
* Call     : bioscom
***********/

void out(char x);
// ********* передать байт в порт
// *********

int waitstart(void);
/***********
* Describe : ждет строки "STRT" от прибора
* Params   : void -
* Return   : int  - код ошибки
* Call     : input,strcmp
***********/

void setaddr(uint x);
/***********
* Describe : устанавливает адрес следующего килобайта памяти для приема
* Params   : word x - адрес в словах (в байтах*2)
* Return   :
* Call     : bioscom
***********/

int getKbyte (byte huge *a);
/***********
* Describe : принять килобайт памяти от прибора
* Params   : byte *a - буфер приема
* Return   : int     - код ошибки
* Call     : input
***********/

asRecPtr huge *readmemory (asHeadPtr *hdr,void (* func)(double));
/***********
* Describe : Функция чтения памяти высокого уровня
* Params   : asHeadPtr *hdr - указ. на указ. на asHeader
*          : void (* func)(double) - функция для отображения считывания, ей
*          :                         передаем процент считанной информации
* Return   : asRecPtr  *    - массив указателей на записи в памяти
* Call     : getdump,numrec,addr
***********/

char *modestr (asRecPtr r);
/***********
* Describe : определение режима
* Params   : asRecPtr r
* Return   : char        - строка-режим
* Call     :
***********/

int modenum (asRecPtr r);
/***********
* Describe : определение номера режима
* Params   : asRecPtr r
* Return   : int        - номер режима
* Call     :
***********/

int afreqnum (asRecPtr r);
/***********
* Describe : определение средней частоты
* Params   : asRecPtr r
* Return   : int        - средняя частота в Гц
* Call     :
***********/

int gainnum (asRecPtr r);
/***********
* Describe : определение коэфф. усиления
* Params   : asRecPtr r
* Return   : int        - коефф. усиления
* Call     :
***********/

char *yunitstr (asRecPtr r);
/***********
* Describe : определение ед. изм.
* Params   : asRecPtr r
* Return   : char       - ед. изм.
* Call     :
***********/

char *xunitstr (asRecPtr r);
/***********
* Describe : определение ед. изм.
* Params   : asRecPtr r
* Return   : char       - ед. изм.
* Call     :
***********/

int windnum (asRecPtr r);
/***********
* Describe : определение номера окна (0-прям.,1-Хеннинга)
* Params   : asRecPtr r
* Return   : int        - номер окна
* Call     :
***********/

int isspectrum (asRecPtr r);
/***********
* Describe : определение спектр? (1-да,0-нет)
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

int issignal (asRecPtr r);
/***********
* Describe : определение сигнал? (1-да,0-нет)
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

int islinear (asRecPtr r);
/***********
* Describe : определение линейный масштаб? (1-да,0-нет)
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

int islogariphm (asRecPtr r);
/***********
* Describe : определение логарифмический масштаб? (1-да,0-нет)
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

void calckoeff (asRecPtr r,float *A,float *B);
/***********
* Describe : подсчет коэффициентов
* Params   : asRecPtr r
*          : float *A   - 1 множ.
*          : float *B   - 2 множ.
* Return   : void
* Call     :
***********/

void setspectrum (asRecPtr r);
/***********
* Describe : установка : спектр
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

void setsignal (asRecPtr r);
/***********
* Describe : установка : сигнал
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

void setlinear (asRecPtr r);
/***********
* Describe : установка : линейный масштаб
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

void setlogariphm (asRecPtr r);
/***********
* Describe : установка : логарифмический масштаб
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

int inc_yunit (asRecPtr r);
/***********
* Describe :
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/

int dec_yunit (asRecPtr r);
/***********
* Describe : дифференциирование ед. измерения по оси Y
* Params   : asRecPtr r
* Return   : int
* Call     :
***********/